<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:security="http://www.springframework.org/schema/security"
   xsi:schemaLocation="http://www.springframework.org/schema/security https://www.springframework.org/schema/security/spring-security-5.2.xsd
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- 정적 리소스 파일에는 보안 설정 해제 -->
	<security:http pattern="/android/**" security="none"/>
	
	<security:http use-expressions="true">
		<!-- 관리자 영역 -->
		<security:intercept-url pattern="/**" access="hasAuthority('ROLE_ADMIN')"/>
		<security:intercept-url pattern="/**" access="hasAuthority('ROLE_USER')"/>
		
		<!-- 권한에 관계없이 접속 가능한 영역 -->		
		<security:intercept-url pattern="/**" access="permitAll"/>	
		
		<!-- 로그인한 사용자 영역 -->
		<!-- 인사팀 -->
		<security:intercept-url pattern="/hr/**" access="hasAuthority('ROLE_HR', 'ROLE_ADMIN')"/>
		
		<!-- 영업팀 -->
		<security:intercept-url pattern="/st/**" access="hasAuthority('ROLE_ST', 'ROLE_ADMIN')"/>
		
		<!-- 구매팀 -->
		<security:intercept-url pattern="/pd/**" access="hasAuthority('ROLE_PD', 'ROLE_ADMIN')"/>
		
		<!-- 물류팀 -->
		<security:intercept-url pattern="/ld/**" access="hasAuthority('ROLE_LD', 'ROLE_ADMIN')"/>
		
		<!-- 회계팀 -->
		<security:intercept-url pattern="/ad/**" access="hasAuthority('ROLE_AD', 'ROLE_ADMIN')"/>
		
		<!-- 로그인폼 -->
		<security:form-login login-page="/main"
			login-processing-url="/main"
			authentication-success-handler-ref="userLoginSuccessHandler"
			authentication-failure-handler-ref="userLoginFailureHandler"
			username-parameter="emp_code" password-parameter="emp_pwd"/>
		
		<!-- 접근 권한이 없는 경우 -->
		<security:access-denied-handler ref="userDeniedHandler"/>
		
		<!-- 
			max-sessions="1" → 같은 브라우저의 여러창에서 동시 접속 막기
			expired-url="" → 세션 만료시 이동할 주소
			error-if-maximum-exceeded="true" → 최대 세션 초과시 에러 옵션
		 -->
		<security:session-management>
			<security:concurrency-control 
				max-sessions="1"
				expired-url="/main"
				error-if-maximum-exceeded="true"/>
		</security:session-management>
	</security:http>
	
	<!-- 로그인 인증을 처리하는 bean 4개 -->
	<!-- 주의 : 에러 발생 시 sqlSession을 UserAuthenticationService 클래스의 매개변수 생성자에 주입해야 한다 -->
	<bean id="userService" class="com.project.UsERP.service.UserAuthenticationService">
		<constructor-arg name="sqlSession" ref="sqlSession"/>
	</bean>
	
	<bean id="userDeniedHandler" class="com.project.UsERP.service.UserDeniedHandler"/>
		
	<bean id="userLoginFailureHandler" class="com.project.UsERP.service.UserLoginFailureHandler">
		<constructor-arg name="sqlSession" ref="sqlSession"/>
		<constructor-arg name="passwordEncoder" ref="bcryptPasswordEncoder"/>
	</bean>		
	
	<bean id="userLoginSuccessHandler" class="com.project.UsERP.service.UserLoginSuccessHandler">
		<constructor-arg name="sqlSession" ref="sqlSession"/>
	</bean>
	
	<!-- 비밀번호를 암호화하는 bean -->
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	
</beans>